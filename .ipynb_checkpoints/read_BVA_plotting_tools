function plot_f82(f82_df)
    # Plot current speed and direction from f82_df
    if !isempty(f82_df)
        p1_f82 = plot(f82_df.Date,f82_df.Speed,label="Speed (m/s)", c="red", lw=2, fillrange = 0, fillalpha = 0.025, fillcolor = :red, legend=:bottomleft,
            gridstyle=:dot, left_margin = 5Plots.mm, right_margin = 15Plots.mm, foreground_color_grid="red", yforeground_color_text="red", ytickfonthalign=:left)
        
        subplot = twinx()
        p1_f82 = plot!(subplot,f82_df.Date,f82_df.Direction,label="Direction", c="blue", line=:dot, lw=2, legend=:bottomright,
            gridstyle=:dashdot, ylim=(0,360), yflip=true, yticks = 0:30:360, showaxis=:y, margin = 15Plots.mm, foreground_color_grid="blue", yforeground_color_text="blue", ytickfonthalign=:right)
        
        plot_f82 = Plots.plot(p1_f82, layout = (1, 1), size = (1400, 800),
                xlim=(first(f82_df.Date),last(f82_df.Date)),  xticks = first(f82_df.Date):Hour(12):last(f82_df.Date), xtickfontsize=7, ytickfontsize=8,
                framestyle = :box, fg_legend=:transparent, title = "Current speed and direction",
                grid=true, gridlinewidth=0.5, gridalpha=1)            

            display(plot_f82)
    end
end


function plot_f29(f29_df)
# Plot H3 Hmax TH3 THmax as calculated by Datawell and stored to F29

    if !isempty(f29_df)
        p1_f29 = plot(f29_df.Date,f29_df.Hmax,label="Hmax", c="red", lw=2, fillrange = 0, fillalpha = 0.025, fillcolor = :red)
        p1_f29 = plot!(f29_df.Date,f29_df.H3,label="Hsig", c="blue", lw=2, fillrange = 0, fillalpha = 0.05, fillcolor = :blue)

        p2_f29 = plot(f29_df.Date,f29_df.THmax,label="THmax", c="red", lw=2, fillrange = 0, fillalpha = 0.025, fillcolor = :red)
        p2_f29 = plot!(f29_df.Date,f29_df.TH3,label="THsig", c="blue", lw=2, fillrange = 0, fillalpha = 0.05, fillcolor = :blue)
        
        # display plots to screen
        plot_f29 = Plots.plot(p1_f29, p2_f29,layout = (2, 1), size = (1400, 700),
            xlim=(first(f29_df.Date),last(f29_df.Date)),  xticks = first(f29_df.Date):Hour(12):last(f29_df.Date), xtickfontsize=7, ytickfontsize=8,
            framestyle = :box,fg_legend=:transparent, legend=:bottomleft,
            margin=1Plots.mm, grid=true, gridlinewidth=0.5, gridstyle=:dot, gridalpha=1)            

        display(plot_f29)
        
    else
    
        println("ALERT: No F29 data available!")

    end    
       
end


function plot_spectra(heave)
################################################
   # DWR4 parameters
    N = 512
    Sample_frequency = 2.56
    dt = 1/Sample_frequency

    # calc window
    w = DSP.Windows.hanning(N)
    w_norm = sqrt(Sample_frequency*sum(w.^2))

    start = 0
    segments = []

    # Do spectral analysis for 17 individual segments of 512 water surface elevations
    for segment in (1:17)
        finish = start+N

        # calculate the Fourier coefficients vide (5.6.2)
        Hl = do_fft(heave[start+1:finish].*w./w_norm, N)

        # calculate power spectral density
        Pden = calc_psd(Hl, N);
        segments = [segments;Pden]

        # set start for next segment
        start = start + 256
    end 

    # convert vector to matrix of 17 individual 256-value spectra
    combined_segments = reshape(segments,256,17);
    Pden = mean.(eachrow(combined_segments))

    freqs = [0:1:N/2-1;]*Sample_frequency/N

    ps_w = welch_pgram(heave, 512, 256; onesided=true, nfft=512, fs=Sample_frequency, window=hanning);
    f2 = freq(ps_w);
    Pden2 = power(ps_w);

    freqs = [1:1:N/2;]*Sample_frequency/N

    # determing maximum y-axis value for time-series plot
    max_y = maximum([abs(minimum(heave)),maximum(heave)]) * 1.05

    # determing maximum y-axis value for spectral plots
    max_y = maximum([maximum(Pden),maximum(Pden2)]) * 1.05

    # plot calculated spectra
    p_spectra = plot(freqs, Pden, label="Calc", 
        c="blue", lw=3, 
        size = (1200, 500), framestyle = :box, 
        xlim=(0,0.6), xticks=0:.05:1.2, xlabel="Frequency (Hertz)",
        ylim=(0,max_y), yticks=0:.5:max_y, ylabel="Spectral Density (sq.m/Hertz)",
        fillrange = 0, fillalpha = 0.075, fillcolor = :blue)
        
    plot_spc = Plots.plot(p_spectra, layout = (1, 1), size = (1400, 800),
            xlim=(0,1.28),  xticks = 0:0.05:1.28, xtickfontsize=7, ytickfontsize=8,
            framestyle = :box, fg_legend=:transparent, title = " Spectral plot", titlefontsize=12,
            grid=true, gridlinewidth=0.5, gridalpha=1, foreground_color_grid="lightgrey", margin = 5Plots.mm)            

    display(plot_spc)
    
end


function plot_hnw(f23_df,Data,found_list)
######################################## 
    
    # Extract parameters from F23 df
    start_date = f23_df[found_list[1],:].Date - Minute(30) # <------- NOTE subtracted 30min from start_date to match Waves4 results
    segments = f23_df[found_list[1],:].Segments
    match_vector = f23_df[found_list[1],:].Match_vector
    sample_nos = f23_df[found_list[1],:].Sample_number
    data_vector = f23_df[found_list[1],:].Data_vector
    start_val = data_vector - Int(sample_nos/2) + 1
    end_val = data_vector
##    println(start_date,' ',segments,' ',match_vector,' ',sample_nos,' ',start_val,' ',end_val,' ',Data[data_vector])

    # get WSEs for desired 30-minute record
    heave = get_displacement(Data[start_val:end_val,:], 1, 3);              
    north = get_displacement(Data[start_val:end_val,:], 4, 6);
    west = get_displacement(Data[start_val:end_val,:], 7, 9);

    # time stamp each WSE
    points = collect(0:1:sample_nos-1)/2.56
    times = []
    for i in 1:length(points)
        push!(times,unix2datetime(datetime2unix(start_date) + points[i]))
    end
    
    # create plots of heave, north, and west
    title_string = Dates.format(start_date, "dd/mm/yyyy HH:MM") * " (UTC)"
    p1_hnw = plot(times,heave, label="Heave", c="blue", lw=0.5, title=title_string, titlefontsize=12) ##last(split(infil,"\\")))
    p2_hnw = plot(times,north, label="North", c="red", lw=0.5)
    p3_hnw = plot(times,west, label="West", c="green", lw=0.5)

    hline!(p1_hnw, [0], lw=1, label="")
    hline!(p2_hnw, [0], lw=1, label="")
    hline!(p3_hnw, [0], lw=1, label="")

    # display plots to screen
    plot_wse = Plots.plot(p1_hnw, p2_hnw, p3_hnw, layout = (3, 1), size = (1400, 1300),
        xlim=(first(times),last(times)),  xticks = first(times):Minute(5):last(times),xtickfontsize=7,ytickfontsize=8,
        framestyle = :box,fg_legend=:transparent, legend=:bottomleft,
        margin = 15Plots.mm, grid=true, gridlinewidth=0.5, gridstyle=:dot, gridalpha=1)            

    display(plot_wse)

    # create a plot file to be saved as a .PNG
    plt_file = first(infil, length(infil)-4)*'_'*Dates.format(start_date, "yyyy_mm_dd_HHMM")*".png"

    # Save plot to file
##            savefig(plt_file)
##            println("Plot file saved as ",plt_file)
    
    return(heave)
    
end    # plot_hnw()
